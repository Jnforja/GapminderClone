{"version":3,"sources":["BubbleChart/D3BubbleChart.js","BubbleChart/BubbleChartWrapper.js","App.js","serviceWorker.js","index.js"],"names":["D3BubbleChart","element","margin","width","height","svg","d3","append","attr","tooltip","style","x","base","domain","range","call","tickValues","tickFormat","text","y","DataJson","d","countries","c","life_exp","nice","area","Math","PI","color","timeLabel","year","legend","forEach","i","row","this","update","yearIdx","selectedContinents","circles","selectAll","data","filter","income","population","length","includes","continent","country","exit","remove","transition","duration","sqrt","enter","on","mouse","html","BubbleChartWrapper","chartYearIdx","useState","chart","setChart","plotRef","useCallback","useEffect","ref","continents","key","value","App","isPlaying","setIsPlaying","setChartYearIdx","setSelectedContinents","timer","setInterval","clearInterval","className","Button","icon","labelPosition","onClick","Icon","name","settings","start","min","max","step","onChange","Dropdown","placeholder","fluid","multiple","selection","options","event","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58058533.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\nimport './BubbleChart.css';\r\nimport DataJson from './data.json';\r\n\r\nexport default class D3BubbleChart {\r\n  constructor(element) {\r\n    const vis = this;\r\n    const margin = { top: 10, right: 50, bottom: 80, left: 100 };\r\n    const width = 1000 - margin.left - margin.right;\r\n    const height = 550 - margin.top - margin.bottom;\r\n\r\n    // append the svg object to the body of the page\r\n    const svg = d3\r\n      .select(element)\r\n      .append('svg')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const tooltip = d3\r\n      .select(element)\r\n      .append('div')\r\n      .attr('class', 'd3-tip')\r\n      .style('position', 'absolute')\r\n      .style('visibility', 'hidden');\r\n\r\n    const x = d3\r\n      .scaleLog()\r\n      .base(8)\r\n      .domain([142, 150000])\r\n      .range([0, width]);\r\n\r\n    // Add X axis\r\n    svg\r\n      .append('g')\r\n      .attr('transform', `translate(0,${height})`)\r\n      .call(\r\n        d3\r\n          .axisBottom(x)\r\n          .tickValues([400, 4000, 40000])\r\n          .tickFormat(d3.format('$'))\r\n      );\r\n\r\n    // Add X Label\r\n    svg\r\n      .append('text')\r\n      .attr('x', width / 2)\r\n      .attr('y', height + 50)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '1.5rem')\r\n      .text(`GDP Per Capita ($)`);\r\n\r\n    const y = d3\r\n      .scaleLinear()\r\n      .domain([0, d3.max(DataJson, d => d3.max(d.countries, c => c.life_exp))])\r\n      .range([height, 0])\r\n      .nice();\r\n\r\n    svg.append('g').call(d3.axisLeft(y));\r\n\r\n    const area = d3\r\n      .scaleLinear()\r\n      .range([25 * Math.PI, 1500 * Math.PI])\r\n      .domain([2000, 1400000000]);\r\n\r\n    const color = d3.scaleOrdinal(d3.schemeSet2);\r\n\r\n    const timeLabel = svg\r\n      .append('text')\r\n      .attr('y', height - 10)\r\n      .attr('x', width - 40)\r\n      .attr('font-size', '2rem')\r\n      .attr('opacity', '0.4')\r\n      .attr('text-anchor', 'middle')\r\n      .text(DataJson[0].year);\r\n\r\n    // Add Y label\r\n    svg\r\n      .append('text')\r\n      .attr('x', -(height / 2))\r\n      .attr('y', -60)\r\n      .attr('font-size', '1.5rem')\r\n      .attr('text-anchor', 'middle')\r\n      .text(`Life Expectancy (Years)`)\r\n      .attr('transform', 'rotate(-90)');\r\n\r\n    const continents = ['europe', 'asia', 'americas', 'africa'];\r\n\r\n    const legend = svg\r\n      .append('g')\r\n      .attr('transform', `translate(${width - 10}, ${height - 125})`);\r\n\r\n    continents.forEach((c, i) => {\r\n      const row = legend\r\n        .append('g')\r\n        .attr('transform', `translate(0, ${i * 20})`);\r\n\r\n      row\r\n        .append('rect')\r\n        .attr('width', 10)\r\n        .attr('height', 10)\r\n        .attr('fill', color(c));\r\n\r\n      row\r\n        .append('text')\r\n        .attr('x', -10)\r\n        .attr('y', 10)\r\n        .attr('text-anchor', 'end')\r\n        .style('text-transform', 'capitalize')\r\n        .text(c);\r\n    });\r\n\r\n    vis.update = update;\r\n\r\n    function update(yearIdx, selectedContinents) {\r\n      const circles = svg\r\n        .selectAll('circle')\r\n        .data(\r\n          DataJson[yearIdx].countries.filter(\r\n            d =>\r\n              d.income &&\r\n              d.life_exp &&\r\n              d.population &&\r\n              (selectedContinents.length === 0 ||\r\n                selectedContinents.includes(d.continent))\r\n          ),\r\n          d => d.country\r\n        );\r\n\r\n      circles.exit().remove();\r\n\r\n      circles\r\n        .transition(d3.transition().duration(100))\r\n        .attr('cx', d => {\r\n          return x(d.income);\r\n        })\r\n        .attr('cy', d => {\r\n          return y(d.life_exp);\r\n        })\r\n        .attr('r', d => {\r\n          return Math.sqrt(area(d.population) / Math.PI) * 2;\r\n        });\r\n\r\n      const enterCircles = circles\r\n        .enter()\r\n        .append('circle')\r\n        .attr('fill', d => color(d.continent))\r\n        .attr('stroke', 'black')\r\n        .attr('stroke-width', '1');\r\n\r\n      enterCircles\r\n        .on('mouseover', function(d) {\r\n          const mouse = d3.mouse(this);\r\n          tooltip\r\n            .style('top', mouse[1] + 'px')\r\n            .style('left', mouse[0] + 'px')\r\n            .style('visibility', 'visible')\r\n            .html(() => {\r\n              let text =\r\n                \"<strong>Country:</strong> <span style='color:orange'>\" +\r\n                d.country +\r\n                '</span><br>';\r\n              text +=\r\n                \"<strong>Continent:</strong> <span style='color:orange;text-transform:capitalize'>\" +\r\n                d.continent +\r\n                '</span><br>';\r\n              text +=\r\n                \"<strong>Life Expectancy:</strong> <span style='color:orange'>\" +\r\n                d3.format('.2f')(d.life_exp) +\r\n                '</span><br>';\r\n              text +=\r\n                \"<strong>GDP Per Capita:</strong> <span style='color:orange'>\" +\r\n                d3.format('$,.0f')(d.income) +\r\n                '</span><br>';\r\n              text +=\r\n                \"<strong>Population:</strong> <span style='color:orange'>\" +\r\n                d3.format(',.0f')(d.population) +\r\n                '</span><br>';\r\n              return text;\r\n            });\r\n        })\r\n        .on('mouseout', () => {\r\n          tooltip.style('visibility', 'hidden');\r\n        })\r\n        .transition(d3.transition().duration(100))\r\n        .attr('cx', d => {\r\n          return x(d.income);\r\n        })\r\n        .attr('cy', d => {\r\n          return y(d.life_exp);\r\n        })\r\n        .attr('r', d => {\r\n          return Math.sqrt(area(d.population) / Math.PI) * 2;\r\n        });\r\n\r\n      timeLabel.text(DataJson[yearIdx].year);\r\n    }\r\n  }\r\n}\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport D3BubbleChart from './D3BubbleChart';\r\n\r\nfunction BubbleChartWrapper({ chartYearIdx, selectedContinents }) {\r\n  const [chart, setChart] = useState(null);\r\n\r\n  const plotRef = useCallback(element => {\r\n    // eslint-disable-next-line no-new\r\n    setChart(new D3BubbleChart(element));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chart !== null) {\r\n      chart.update(chartYearIdx, selectedContinents);\r\n    }\r\n  }, [chart, chartYearIdx, selectedContinents]);\r\n\r\n  return <div ref={plotRef} />;\r\n}\r\n\r\nexport default BubbleChartWrapper;\r\n","import React, { useState, useEffect } from 'react';\nimport { Slider } from 'react-semantic-ui-range';\n\nimport { Button, Icon, Dropdown } from 'semantic-ui-react';\n\nimport BubbleChartWrapper from './BubbleChart/BubbleChartWrapper';\n\nconst continents = [\n  { key: 'Europe', value: 'europe', text: 'Europe' },\n  { key: 'Asia', value: 'asia', text: 'Asia' },\n  { key: 'Americas', value: 'americas', text: 'Americas' },\n  { key: 'Africa', value: 'africa', text: 'Africa' }\n];\n\nfunction App() {\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [chartYearIdx, setChartYearIdx] = useState(0);\n  const [selectedContinents, setSelectedContinents] = useState([]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (isPlaying) {\n        setChartYearIdx(chartYearIdx < 214 ? chartYearIdx + 1 : 0);\n      }\n    }, 100);\n    return () => clearInterval(timer);\n  });\n\n  return (\n    <div className=\"App\">\n      <BubbleChartWrapper\n        chartYearIdx={chartYearIdx}\n        selectedContinents={selectedContinents}\n      />\n      <Button\n        icon\n        labelPosition=\"left\"\n        onClick={() => setIsPlaying(!isPlaying)}\n      >\n        <Icon name={isPlaying ? 'pause' : 'play'} />\n        {isPlaying ? 'pause' : 'play'}\n      </Button>\n      <Button icon=\"repeat\" onClick={() => setChartYearIdx(0)} />\n\n      <Slider\n        color=\"orange\"\n        value={chartYearIdx}\n        settings={{\n          start: 0,\n          min: 0,\n          max: 214,\n          step: 1,\n          onChange: value => {\n            setChartYearIdx(value);\n          }\n        }}\n      />\n      <Dropdown\n        placeholder=\"Continents\"\n        fluid\n        multiple\n        selection\n        options={continents}\n        onChange={(event, data) => setSelectedContinents(data.value)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}