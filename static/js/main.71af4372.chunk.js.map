{"version":3,"sources":["D3ScatterPlot.js","ScatterPlotWrapper.js","App.js","serviceWorker.js","index.js"],"names":["D3ScatterPlot","element","margin","width","height","svg","d3","append","attr","x","base","domain","range","call","tickValues","tickFormat","text","y","DataJson","d","countries","c","life_exp","nice","area","Math","PI","color","timeLabel","year","legend","forEach","i","row","style","time","data","circles","selectAll","filter","income","population","country","exit","remove","transition","duration","sqrt","enter","continent","update","ScatterPlotWrapper","plotRef","useCallback","display","alignItems","justifyItems","ref","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71af4372.chunk.js","sourcesContent":["import * as d3 from 'd3';\r\nimport DataJson from './data.json';\r\n\r\nexport default class D3ScatterPlot {\r\n  constructor(element) {\r\n    const margin = { top: 10, right: 30, bottom: 80, left: 80 };\r\n    const width = 700 - margin.left - margin.right;\r\n    const height = 400 - margin.top - margin.bottom;\r\n\r\n    // append the svg object to the body of the page\r\n    const svg = d3\r\n      .select(element)\r\n      .append('svg')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    const x = d3\r\n      .scaleLog()\r\n      .base(8)\r\n      .domain([142, 150000])\r\n      .range([0, width]);\r\n\r\n    // Add X axis\r\n    svg\r\n      .append('g')\r\n      .attr('transform', `translate(0,${height})`)\r\n      .call(\r\n        d3\r\n          .axisBottom(x)\r\n          .tickValues([400, 4000, 40000])\r\n          .tickFormat(d3.format('$'))\r\n      );\r\n\r\n    // Add X Label\r\n    svg\r\n      .append('text')\r\n      .attr('x', width / 2)\r\n      .attr('y', height + 50)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '1.5rem')\r\n      .text(`GDP Per Capita ($)`);\r\n\r\n    const y = d3\r\n      .scaleLinear()\r\n      .domain([0, d3.max(DataJson, d => d3.max(d.countries, c => c.life_exp))])\r\n      .range([height, 0])\r\n      .nice();\r\n\r\n    svg.append('g').call(d3.axisLeft(y));\r\n\r\n    const area = d3\r\n      .scaleLinear()\r\n      .range([25 * Math.PI, 1500 * Math.PI])\r\n      .domain([2000, 1400000000]);\r\n\r\n    const color = d3.scaleOrdinal(d3.schemeSet2);\r\n\r\n    const timeLabel = svg\r\n      .append('text')\r\n      .attr('y', height - 10)\r\n      .attr('x', width - 40)\r\n      .attr('font-size', '2rem')\r\n      .attr('opacity', '0.4')\r\n      .attr('text-anchor', 'middle')\r\n      .text(DataJson[0].year);\r\n\r\n    // Add Y label\r\n    svg\r\n      .append('text')\r\n      .attr('x', -(height / 2))\r\n      .attr('y', -60)\r\n      .attr('font-size', '1.5rem')\r\n      .attr('text-anchor', 'middle')\r\n      .text(`Life Expectancy (Years)`)\r\n      .attr('transform', 'rotate(-90)');\r\n\r\n    const continents = ['europe', 'asia', 'americas', 'africa'];\r\n\r\n    const legend = svg\r\n      .append('g')\r\n      .attr('transform', `translate(${width - 10}, ${height - 125})`);\r\n\r\n    continents.forEach((c, i) => {\r\n      const row = legend\r\n        .append('g')\r\n        .attr('transform', `translate(0, ${i * 20})`);\r\n\r\n      row\r\n        .append('rect')\r\n        .attr('width', 10)\r\n        .attr('height', 10)\r\n        .attr('fill', color(c));\r\n\r\n      row\r\n        .append('text')\r\n        .attr('x', -10)\r\n        .attr('y', 10)\r\n        .attr('text-anchor', 'end')\r\n        .style('text-transform', 'capitalize')\r\n        .text(c);\r\n    });\r\n\r\n    let time = 0;\r\n    d3.interval(() => {\r\n      time = time < 214 ? time + 1 : 0;\r\n      update(DataJson[time]);\r\n    }, 100);\r\n\r\n    function update(data) {\r\n      const circles = svg\r\n        .selectAll('circle')\r\n        .data(\r\n          data.countries.filter(d => d.income && d.life_exp && d.population),\r\n          d => d.country\r\n        );\r\n\r\n      circles\r\n        .exit()\r\n        .attr('class', 'exit')\r\n        .remove();\r\n\r\n      circles\r\n        .transition(d3.transition().duration(100))\r\n        .attr('cx', d => {\r\n          return x(d.income);\r\n        })\r\n        .attr('cy', d => {\r\n          return y(d.life_exp);\r\n        })\r\n        .attr('r', d => {\r\n          return Math.sqrt(area(d.population) / Math.PI);\r\n        });\r\n\r\n      circles\r\n        .enter()\r\n        .append('circle')\r\n        .attr('class', 'enter')\r\n        .attr('fill', d => color(d.continent))\r\n        .transition(d3.transition().duration(100))\r\n        .attr('cx', d => {\r\n          return x(d.income);\r\n        })\r\n        .attr('cy', d => {\r\n          return y(d.life_exp);\r\n        })\r\n        .attr('r', d => {\r\n          return Math.sqrt(area(d.population) / Math.PI);\r\n        });\r\n\r\n      timeLabel.text(data.year);\r\n    }\r\n  }\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport D3ScatterPlot from './D3ScatterPlot';\r\n\r\nfunction ScatterPlotWrapper() {\r\n  const plotRef = useCallback(element => {\r\n    // eslint-disable-next-line no-new\r\n    new D3ScatterPlot(element);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100vh',\r\n        display: 'grid',\r\n        alignItems: 'center',\r\n        justifyItems: 'center'\r\n      }}\r\n      ref={plotRef}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ScatterPlotWrapper;\r\n","import React from 'react';\nimport ScatterPlotWrapper from './ScatterPlotWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScatterPlotWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}